AWSTemplateFormatVersion: "2010-09-09"
Description: Network template

Parameters:
  System:
    Type: String
    Default: cicd-handson
  Env:
    Type: String
    Default: test
    Description: Env Name

Resources:
# ------------------------------------------------------------#
# VPCãƒ»Subnet
# ------------------------------------------------------------# 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet01: # alb
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC

  PublicSubnet02: # alb
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC

  PublicSubnet10: # public nat
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.10.0/24
      VpcId: !Ref VPC

  PublicSubnet11: # public nat
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.11.0/24
      VpcId: !Ref VPC      

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC

  PrivateSubnetRDS01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref VPC      

  PrivateSubnetRDS02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.5.0/24
      VpcId: !Ref VPC

  PrivateSubnetVPN01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.12.0/24
      VpcId: !Ref VPC            

# ------------------------------------------------------------#
# Internet Gateway
# ------------------------------------------------------------# 
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name
          Value: !Sub ${System}-${Env}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# ------------------------------------------------------------#
# Route Table
# ------------------------------------------------------------# 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRouteTableRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicRtAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicRtAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet02

  PublicRtAssociation10:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet10

  PublicRtAssociation11:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet11

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTableRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRtAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet01

  PrivateRtAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet02

  PrivateRtAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetRDS01

  PrivateRtAssociation2: #should be #4 but it is processed already somehow
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetRDS02

  PrivateRtAssociation12:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetVPN01
# ------------------------------------------------------------#
# Security Group
# ------------------------------------------------------------# 
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      GroupName: alb-sg
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          ToPort: 80
      VpcId: !Ref VPC

  ECSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS SG
      GroupName: ecs-sg
      SecurityGroupIngress:
        - FromPort: 8501
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ALBSG
          ToPort: 8501
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref VPNSG
          ToPort: 22
        - FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref VPNSG
          ToPort: 443 
        - IpProtocol: -1  # Allows all traffic
          CidrIp: 0.0.0.0/0  # From any IP address          
      VpcId: !Ref VPC

  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS SG
      GroupName: rds-sg
      SecurityGroupIngress:
        - FromPort: 5432
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ECSSG
          ToPort: 5432                  
      VpcId: !Ref VPC

  VPCEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC Endpoint SG
      GroupName: Vpc-Endpoint-sg
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref ECSSG
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VPC

  VPNSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Client VPN SG
      GroupName: client-vpn-sg
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 10.0.2.0/23
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 10.0.2.0/23
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0  # From any IP address            
          IpProtocol: -1  # Allows all traffic

# ------------------------------------------------------------#
# Nat Gateway
# ------------------------------------------------------------# 
  ElasticIPForNatGateway:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: !Ref VPC

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt ElasticIPForNatGateway.AllocationId # Must be ID of EIP
      SubnetId: !Ref PublicSubnet10
      Tags:
        - Key: Name
          Value: !Sub '${System}-${Env}-public-Nat-Gateway'

